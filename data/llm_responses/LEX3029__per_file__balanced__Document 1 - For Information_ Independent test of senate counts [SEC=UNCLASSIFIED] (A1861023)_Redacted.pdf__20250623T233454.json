{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "The document is an internal AEC email from July 2016, forwarding a January 2014 blog post by Grahame Bowland, a WA Greens member. Bowland details his independent project to replicate the Australian Electoral Commission's (AEC) 2013 Western Australian Senate election count using open-source Python code (`dividebatur`). His initiative was prompted by the AEC's closed-source software and the difficulty in independently verifying election outcomes. After obtaining AEC run logs and studying the Commonwealth Electoral Act, Bowland successfully developed software that \"exactly reproduced the AEC’s results\" for both the initial count and the recount. He explicitly states, \"I found no fault at all in the AEC’s software.\" His blog post also discusses hypothetical scenarios, such as adding back \"lost\" votes, and notes subtle complexities of the Single Transferable Vote (STV) algorithm, including \"exclusion tie resolution\" and rounding.\n\nThis document is highly relevant to the FOI request as it provides direct evidence for the \"early independent tests (2016-2017) found no issues replicating the AEC's 2013 WA Senate count.\" It specifically contradicts the later 2021 Conway and Teague report's findings of discrepancies by stating an earlier, detailed independent analysis found no faults with the AEC's methodology or algorithm as applied to the 2013 election. It highlights the differing conclusions reached by external scrutiny over time regarding the accuracy and implementation of the AEC's counting processes, particularly concerning aspects like tie-breaking and vote transfers, which were later flagged as problematic."
          }
        ],
        "role": "model"
      },
      "finish_reason": 1,
      "index": 0,
      "safety_ratings": [],
      "token_count": 0,
      "grounding_attributions": [],
      "avg_logprobs": 0.0
    }
  ],
  "usage_metadata": {
    "prompt_token_count": 1920,
    "candidates_token_count": 336,
    "total_token_count": 3011,
    "cached_content_token_count": 0
  },
  "model_version": "gemini-2.5-flash",
  "prompt": "Considering this document as part of an FOI request, summarize the document and its relevance to the FOI request in markdown format. Provide only the markdown formatted summary text. Do not include any conversational filler or preamble.To aid you, the overview of the FOI request is: [REQUEST OVERVIEW START] This FOI request sought information concerning the accuracy, methodology, and identified issues with the Australian Electoral Commission's (AEC) Senate election counting algorithm and associated scrutiny processes. While early independent tests (2016-2017) found no issues replicating the AEC's 2013 WA Senate count, a subsequent 2021 report by Conway and Teague identified significant discrepancies. This report detailed that the AEC's software used tie-breaking rules inconsistent with the Electoral Act, noted the non-implementation of bulk exclusions (which can alter outcomes), and highlighted ambiguities in the Electoral Act concerning the count's termination. The report proposed various legislative and procedural recommendations, including publishing the AEC's code, correcting tie-breaking, and clarifying statutory definitions, to which the AEC subsequently responded.\n [REQUEST OVERVIEW END] \n\n--- MAIN DOCUMENT TEXT START ---\n\n\n\n--- Page 1 ---\n\nFrom:\nTo:\nSubject:\nDate:\nAttachments:\n\nFor Information: Independent test of senate counts [SEC=UNCLASSIFIED]\nWednesday, 20 July 2016 2:52:00 PM\nimage001.gif\nimage002.gif\n\nUNCLASSIFIED\n\nAs discussed a member of the WA Greens, Grahame Bowland, wrote python code to\nreplicate the Senate count. He found no issue with the AEC results. It was a completely\nindependent activity, using the legislation as a source, and comparing to the distribution of\npreferences (I think that is what he is referring to).\n\nHis blog post on the matter is not available through the SOE, so I’ve replicated the text\nbelow. For reference, the software is still hosted on GitHub here:\nhttps://github.com/grahame/dividebatur\n\nCounting the West Australian Senate Election\n\nPosted on January 25, 2014 by Grahame Bowland\n\ntl;dr – check out angrygoats.net/wasenate/ to see the full details of the WA senate election distribution – precisely\nhow the count was processed by the AEC for both the initial count (#14votes) and the recount, and to see what\nhappens if the “lost” votes are added back in, assuming they were counted right the first time. grab the code and\nrun the distribution yourself, it’s over on github.\n\nWestern Australia went to the polls with the rest of the country on September 7 2013, but failed to clearly elect six\nsenators. When the votes were tallied a crucial exclusion on a margin of 14 votes was the difference between the\nelection of Scott Ludlam (Greens) and Wayne Dropulich (Sports Party), or Louise Pratt (ALP) and Zhenya Wang\n(Palmer). The ALP & Palmer won on this count, but no result was declared and a recount was conducted.\nAfter the initial count, several people asked me how the Australian Electoral Commission (AEC) processed the\ndistribution of preferences, and whether there was a way to verify it. To my surprise the AEC software which takes\nall above-the-line and below-the-line votes and runs a Single Transferable Vote (STV) distribution is closed source\nand not available for download. I was unable to find any publicly available software to run the count. This made it\nextremely difficult to verify the correctness of AEC’s results.\nWhile the recount was going on I got to work on some software to process the distribution. This was greatly helped\nby a detailed run log from the AEC’s software I managed to obtain. This told me exactly how the AEC’s software ran\nthe distribution, including totals of votes for each candidate at each count, and precisely when candidates were\nelected and excluded.\nSTV is really a family of voting systems – some details vary between jurisdictions. The information I could find on\nthe AEC website on how to process the distribution was adequate only for educational purposes, and did not go into\nthe fine details. This lead to much late night study of the Commonwealth Electoral Act. A bill of Parliament is a\npretty awful means to document an algorithm, but everything needed is in Part XVIII.\nThe AEC publish all the data necessary to run a count on their Senate downloads page. It is simply a matter of\ntaking the number of above-the-line (ticket) votes and counting these votes as that number of papers following the\nparty’s ticket(s). They also publish the form of every below-the-line paper lodged. Add those papers into one\ncollection and you have all the information necessary to run the distribution, and determine who the elected\ncandidates are.\nIn two long nights of work, I was able to get this done – exactly reproducing the AEC’s results in my software. The\ncode was pretty rough and ready, but I had functional tests which checked my results matched the AEC’s. Being\nafraid of rounding errors I made sure to stick with rational number representations of transfer values, and was\nslightly hopeful this might turn up a minor error in the AEC’s software. Disappointingly, but reassuringly, I found no\nfault at all in the AEC’s software.\nThe AEC published above-the-line vote counts as the recount progressed. This made me hopeful I’d be able to run\na count myself once the recount was complete and know the result before the official distribution was run.\nUnfortunately they did not enter the changes to the below-the-line votes (ballots rescued from the informal pile) until\nthe last day, and did not make the data available until a couple of hours after they ran the count and declared the\nresult. Gratifyingly my software agreed with theirs, the election now tipping to Scott Ludlam and Wayne Dropulich,\nthe same crucial exclusion now going 12 votes the other way.\nOf course, the AEC lost 1370 votes which were not included in the recount. The preferences of those votes as\ninterpreted during the first count were published by the AEC, making it simple to add them back into the recount.\nThis swings the crucial exclusion back to a margin of 1 vote, electing Louise Pratt and Zhenya Wang. It’s impossible\nto know if these votes would have stood as they did if scrutinised again, and votes may also have come back from\n\n\n--- Page 2 ---\n\nlost informal votes.\nThe full senate vote distribution for these three scenarios can be viewed in detail. You can flick through the counts\none-by-one, or the summary page for each scenario will link you to the count in which any given candidate was\nelected or excluded.\nMy software outputs JSON data descr bing the distribution process, and the user interface is an\nangularjs application which presents that JSON data. If anyone is interested in analysis or visualisation of the full\ndistribution (as opposed to a simplified distribution only including above-the-line votes) the JSON files are linked for\ndownload. I would love to see some great animations appear from this data!\nIf you want to check out the code behind this, it’s over on github. I have named the project dividebatur (Latin for\n‘distribution’) and it is open source under the Apache license. If you’re interested in the STV algorithm itself, it’s\nimplemented in these 700 lines of Python code (hopefully quite readable).\nI learnt a bunch of surprising things implementing the distribution. A bundle of “x” papers distributed at a given\ntransfer value translates into a “x” times the transfer value votes, rounded down. This means that occasionally votes\nwill be “lost” to rounding. What I didn’t realise is that those votes can also come back – if those papers are\ndistributed in an exclusion, they may break by next preference in a way that avoids the rounding issue. Subtle\ndetails like this (and split group voting tickets, exclusion tie resolution, …) were tricky to get right!\nIn conclusion, we’ve now got some software which lets us as voters verify that the rather complex senate\ndistribution is correct, and study hypothetical scenarios if we want to. It is easy to determine what would happen if a\nparty changed their ticket vote in a particular way, or consider what would happen if a state-that-shall-not-be-named\nstuffed up their senate election. I hope you find it useful, and please send me feedback and/or patches!\n@angrygoat on twitter or grahame@angrygoats.net.\nDisclosure: I’m a member of The Greens (WA). I don’t believe anything in this post is partisan, and I am speaking\nfor myself. My software is open source and can be verified at your leisure :-)\n\n| Senior Research Officer\n\nStrategic Research & Analysis Section | Roll Management Branch\nAustralian Electoral Commission\n\nUNCLASSIFIED\n\n"
}